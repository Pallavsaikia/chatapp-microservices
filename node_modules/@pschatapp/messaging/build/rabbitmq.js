"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rabbitMQ = void 0;
const base_1 = require("./base");
const rabbitmq_exchangetype_1 = require("./rabbitmq-exchangetype");
class RabbitMQ extends base_1.RabbitMqClient {
    constructor() {
        super(...arguments);
        this.exchangeType = rabbitmq_exchangetype_1.RabbitMqExchangeType.Topic;
    }
    get client() {
        if (!this._client) {
            throw new Error("cannot access/connect rabbitmq channel");
        }
        return this._client;
    }
    get clientExist() {
        if (!this._client) {
            return false;
        }
        return true;
    }
    connectConfirm(url, exchangeName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.url = url;
            this.exchangeName = exchangeName;
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const { success, rabbitmq, error } = yield this.connect();
                if (success) {
                    resolve(null);
                    this._client = rabbitmq;
                }
                else {
                    reject(error);
                }
            }));
        });
    }
    deleteExchangeConfirm() {
        return __awaiter(this, void 0, void 0, function* () {
            this.deleteExchange();
        });
    }
    disconnectConfirm() {
        return __awaiter(this, void 0, void 0, function* () {
            this.disconnect();
        });
    }
}
exports.rabbitMQ = new RabbitMQ();
