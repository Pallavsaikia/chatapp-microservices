"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserVerifiedEventPublisher = void 0;
const base_1 = require("../base");
const exchange_name_1 = require("../exchange-name");
const rabbitmq_1 = require("../rabbitmq");
const routing_1 = require("../routing");
const routes_1 = require("../routes");
class UserVerifiedEventPublisher extends base_1.Publisher {
    onSuccess(err, ok) {
        console.log("success", err, ok);
    }
    onFail(err, ok) {
        console.log("fail", err);
    }
    constructor() {
        super(rabbitmq_1.rabbitMQ.client);
        this.routingKey = new routing_1.RoutingKey(routes_1.RabbitMqService.authService, routes_1.RabbitMqEntity.user, routes_1.RabbitMqEvent.registration, routes_1.RabbitMqAction.verified);
        this.expiration = 150000;
        this.mandatory = true;
        this.persistent = true;
    }
}
exports.UserVerifiedEventPublisher = UserVerifiedEventPublisher;
function test() {
    return __awaiter(this, void 0, void 0, function* () {
        yield rabbitmq_1.rabbitMQ.connectConfirm("amqp://user:HvDxHHJAqRuikn0O@localhost:30221", exchange_name_1.ExchangeName.chatApp);
        yield rabbitmq_1.rabbitMQ.deleteExchangeConfirm();
        new UserVerifiedEventPublisher().publish({ _id: "|adadada", email: "adadadada", username: "dadadada", createdAt: "Adadaa", updatedAt: "ddddd" });
        console.log("done");
    });
}
test();
