"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Publisher = void 0;
class Publisher {
    constructor(client) {
        this.client = client;
    }
    publish(msg) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.client.channel) {
                    console.log("channel not created");
                    return false;
                }
                const isChannelOpen = this.client.channel.connection.connection;
                if (!isChannelOpen) {
                    this.onFail(new Error("exchange doesnot exist"), null);
                    return false;
                }
                return this.client.channel.publish(this.client.exchangeName, this.routingKey.toString(), Buffer.from(JSON.stringify(msg)), {
                    mandatory: this.mandatory ? this.mandatory : true,
                    persistent: this.persistent ? this.persistent : true,
                    expiration: this.expiration ? this.expiration : 604800000
                }, (err, ok) => {
                    if (err) {
                        this.onFail(err, ok);
                    }
                    else {
                        this.onSuccess(err, ok);
                    }
                });
            }
            catch (e) {
                this.onFail(e, null);
                console.log(e);
            }
            return false;
        });
    }
}
exports.Publisher = Publisher;
