"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RabbitMqClient = void 0;
const amqplib_1 = __importDefault(require("amqplib"));
class RabbitMqClient {
    constructor() { }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.url) {
                    this.disconnect();
                    return { success: false, rabbitmq: this, error: new Error("no url found") };
                }
                if (!this.exchangeName) {
                    this.disconnect();
                    return { success: false, rabbitmq: this, error: new Error("no exchange name found") };
                }
                this.connection = yield amqplib_1.default.connect(this.url);
                this.channel = yield this.connection.createConfirmChannel();
                yield this.channel.assertExchange(this.exchangeName, this.exchangeType, { durable: false });
                return { success: true, rabbitmq: this };
            }
            catch (e) {
                this.disconnect();
                console.log(e);
                return { success: false, rabbitmq: this, error: e };
            }
        });
    }
    deleteExchange() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.exchangeName) {
                    this.disconnect();
                    return false;
                }
                yield ((_a = this.channel) === null || _a === void 0 ? void 0 : _a.deleteExchange(this.exchangeName));
            }
            catch (e) {
                console.log(e);
                return false;
            }
            return true;
        });
    }
    disconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.connection) {
                    this.connection.removeAllListeners();
                    this.connection.close();
                }
            }
            catch (e) {
                console.log(e);
            }
        });
    }
}
exports.RabbitMqClient = RabbitMqClient;
