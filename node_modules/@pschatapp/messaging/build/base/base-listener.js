"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
class Listener {
    constructor(client) {
        this.client = client;
    }
    subscribe() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client.channel) {
                console.log("channel not created");
                return false;
            }
            console.log(`waiting for messsages at --------- ${this.routingKey.toString()}`);
            this.client.queue = yield this.client.channel.assertQueue(this.queueName ? this.queueName : '', {
                exclusive: this.exclusive ? this.exclusive : false,
                durable: this.durable ? this.durable : true,
                autoDelete: this.autoDelete ? this.autoDelete : false,
                expires: this.expires ? this.expires : 604800000 //7 days
            });
            this.client.channel.bindQueue(this.client.queue.queue, this.client.exchangeName, this.routingKey.toString());
            this.client.channel.consume(this.client.queue.queue, (msg) => {
                if (msg !== null) {
                    console.log(msg.content.toString());
                    this.onMessage(this.parsedData(msg), msg);
                }
            }, { noAck: true });
        });
    }
    parsedData(msg) {
        console.log(`Routing Key: ${msg.fields.routingKey}, Message: ${msg.content.toString()}`);
        const data = msg.content;
        return typeof data === "string" ?
            JSON.parse(data) :
            JSON.parse(data.toString('utf8'));
    }
}
exports.Listener = Listener;
